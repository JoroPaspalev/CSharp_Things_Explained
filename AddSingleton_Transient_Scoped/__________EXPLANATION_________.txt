1. Create Employee.cs, IEmployeeRepository.cs and MockEmployeeRepository.cs classes
2. Go to Startup.cs and registrate dependecies: 
		 //services.AddSingleton<IEmployeeRepository, MockEmployeeRepository>();
      or //services.AddScoped<IEmployeeRepository, MockEmployeeRepository>();
	  or //services.AddTransient<IEmployeeRepository, MockEmployeeRepository>();
3. Now we go in HomeController and inject in ctor IEmployeeRepository
4. Implement Create Action with [HttpGet] attr
5. Implement Create Action with [HttpPost] attr
6. Implement Create.cshtml View and @inject IEmployeeRepository
7. Start application and navigate to localhost/home/create ->That will sent Http Get request to Home controller create action and this action will return View with count of Employees 3. After that we fill all the fields in the form and press the button that will sent Http Request to the HomeController Create action with Http Post request. Because we are selected AddSingleton (this make only one instance of MockEmployeeRepository and this instance will live until we stop the application) that will inject in all places(in HomeController and in Create View) every time this initial created instance for all Http requests. We receive new Employee from the Form in Create [HttpPost] action and call MockEmployeeRepository.Add Method. This will add new Employee in employeList private field. After we will return in HomeController and return View(). But what is happening here -> the Create View will inject the same instance of MockEmployeeRepository where private field _employeeList is with 4 Employees already. And now this View will render Count of Employees = 4

8. If we select services.AddScoped<IEmployeeRepository, MockEmployeeRepository>(); this will Create a new instance on every new Http Request,but in the Scope of this Http request (from receiving the request in HomeController until returning html to the browser) in each place where we must inject MockEmployeeRepository we will pass the same Instance. For example we sent Get Request to localhost/home/create - this in one request. Here we will create this instance for first time in ctor on HomeController. After that in the View we will pass the same instance and return the Html to the browser. Diffrence between addSingleton is here -> when we sent Http Post request -> this is second request, that will create new instance of MockEmployeeRepository where employeeList count = 3, After that will call .Add() method. It will add new Employee to List and View will return Count = 4. But if we sent one more Http Post Request -> this is third one request, this will create again new instance with employeesList =3, after will add new Employee and View will return count = 4 and so on..

9.If we select services.AddTransient<IEmployeeRepository, MockEmployeeRepository>(); this will Create a new instance on every new Http Request and everyWhere ( in HomeController and in the View). The count always will be 3, because the instance in HomeController will be one, but in the View will be different one.